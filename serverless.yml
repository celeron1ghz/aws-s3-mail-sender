service: s3-mail-sender

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  deploymentBucket: serverless-upload-us-east-1
  versionFunctions: false

functions:
  notifier:
    handler:     handler.notifier
    description: Post SES's Bounce/Complaint/Delivery status to slack
    timeout: 10
    environment:
      S3_MAIL_SENDER_SLACK_WEBHOOK_URL: "${ssm:/webservice/slack/incoming/mailStatus~true}"

  mailSender:
    handler:     handler.sender
    description: Sending email with SES from S3 data
    timeout: 20
    role: MailSenderRole
    environment:
      RESULT_BUCKET: { Ref: MailResultBucket }
    events:
      - sns:
          topicName: "${self:service}-queue"
          displayName: Mail sending queue

resources:
  Resources:
    ##### resource for delivery status notify
    StatusNotifyTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName:   "${self:service}-delivery-status"
        DisplayName: Handles SES Bounce/Complaint/DeliveryStatus
        Subscription:
          - Endpoint: { Fn::GetAtt: [NotifierLambdaFunction, Arn] }
            Protocol: lambda

    StatusNotifyPerm:
      Type: AWS::Lambda::Permission
      Properties:
        Action:       "lambda:InvokeFunction"
        FunctionName: { Fn::GetAtt: [NotifierLambdaFunction, Arn] }
        Principal:    sns.amazonaws.com
        SourceArn:    { Ref: StatusNotifyTopic }

    ## resource for mail sender
    MailSenderRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:service}-notify-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect:    Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        Policies:
          - PolicyName: "${self:service}-notify-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Resource: arn:aws:logs:*:*:*
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                - Effect: Allow
                  Action: [ses:SendRawEmail]
                  Resource: "*"
                - Effect: Allow
                  Action: [s3:DeleteObject]
                  Resource: "arn:aws:s3:::${self:service}-queue/*"
                - Effect: Allow
                  Action: [s3:PutObject]
                  Resource: "arn:aws:s3:::${self:service}-result/*"

    MailResultBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-result"
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled

    MailSenderBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-queue"
        ## first, comment out at end of file from this line. after deploy, comment in and deploy again
        NotificationConfiguration:
          TopicConfigurations:
            - Event: "s3:ObjectCreated:*"
              Topic:
                Fn::Join: [":", [ "arn:aws:sns", { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, "${self:service}-queue" ]]

    MailSenderPerm:
      Type: AWS::Lambda::Permission
      Properties:
        Action:       "lambda:InvokeFunction"
        FunctionName: { "Fn::GetAtt": [MailSenderLambdaFunction, Arn] }
        Principal:    sns.amazonaws.com
        SourceArn:
          Fn::Join : [ "", ["arn:aws:s3:::${self:service}-queue/*" ] ]

    MailSenderTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - Fn::Join: [":", [ "arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "${self:service}-queue" ]]
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect:    Allow
              Principal: { AWS: "*" }
              Action:    "SNS:Publish"
              Resource:  "*"
              Condition:
                ArnLike:
                  aws:SourceArn:
                    Fn::Join: [ "", ["arn:aws:s3:*:*:${self:service}-queue" ] ]

service: aws-s3-mail-sender

custom:
  app_id: acceptessa

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: us-east-1
  deploymentBucket: serverless-upload-us-east-1
  cfLogs: true

functions:
  notifier:
    handler:     handler.notifier
    description: Post Bounce/Complaint/Delivery status to slack
    timeout:     6
    memorySize:  128
    role:        MyRole
    environment:
      S3_MAIL_SENDER_SLACK_HOOK_URL: ${file(kms.js):kms.S3_MAIL_SENDER_SLACK_HOOK_URL}
      S3_MAIL_SENDER_SLACK_CHANNEL:  ${file(kms.js):kms.S3_MAIL_SENDER_SLACK_CHANNEL}

  mailSender:
    handler:     handler.notifier ##FIXME
    description: Sending email using SES from S3 data
    timeout:     6
    memorySize:  128
    role:        MyRole

resources:
  Resources:
    MyRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.app_id}-mail-sender-role-2
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect:    Allow
              Principal: { Service: "lambda.amazonaws.com" }
              Action:    "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        Policies:
          - PolicyName: ${self:custom.app_id}-mail-sender-policy-2
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DescribeLogStreams"]
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action: ["ses:SendRawEmail"]
                  Resource: "*"
                - Effect: Allow
                  Action: ["s3:DeleteObject"]
                  Resource:
                    "Fn::Join" : [ 
                      "", 
                      ["arn:aws:s3:::", { Ref : MailQueueBucket }, "/*" ]
                    ]

    ## mail sender topic
    MailSenderTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName:   ${self:custom.app_id}-mail-sender-2
        DisplayName: Mail queues by s3:PutObject publish to this topic

    MailSenderTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect:    Allow
              Principal: { AWS: "*" }
              Action:    "SNS:Publish"
              Resource:  "*"
              Condition:
                ArnLike:
                  "aws:SourceArn":
                    "Fn::Join" : [ 
                      "", 
                      ["arn:aws:s3:*:*:", { Ref : MailQueueBucket } ]
                    ]
        Topics:
          - { Ref: MailSenderTopic }

    ## queue bucket
    MailQueueBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.app_id}-mail-queue-2
        NotificationConfiguration:
          TopicConfigurations:
            - Event: "s3:ObjectCreated:*"
              Topic: { Ref: MailSenderTopic }

    ## delivery status
    MailDeliverStatusTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName:   ${self:custom.app_id}-mail-delivery-status-2
        DisplayName: Handles SES's Bounce/Complaint/DeliveryStatus
        Subscription:
          - Endpoint: { "Fn::GetAtt": [MailSenderLambdaFunction, Arn] }
            Protocol: lambda

    MailDeliverStatusPerm:
      Type: AWS::Lambda::Permission
      Properties:
        Action:       "lambda:InvokeFunction"
        FunctionName: { "Fn::GetAtt": [MailSenderLambdaFunction, Arn] }
        Principal:    sns.amazonaws.com
        SourceArn:    { Ref: MailSenderTopic }

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
